{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM8iH4qfhxPXDlpX8vA9pnK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eUEigJqYAeKb","executionInfo":{"status":"ok","timestamp":1707820262085,"user_tz":-330,"elapsed":19002,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}},"outputId":"36327735-e05e-47b5-ece6-a4197117d5c4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np"],"metadata":{"id":"ZyJI6GZWBgh3","executionInfo":{"status":"ok","timestamp":1707822104382,"user_tz":-330,"elapsed":677,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["df=pd.read_csv('/content/drive/MyDrive/DSW_Internship_Task/train_df.csv')\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"UmwiBRqPBS0m","executionInfo":{"status":"ok","timestamp":1707822106977,"user_tz":-330,"elapsed":10,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}},"outputId":"277a5895-ee8a-4fe8-ee54-eee65319cd6a"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   category  main_promotion  color  stars  success_indicator\n","0         5               0      3    1.0                  0\n","1         1               1      7    0.0                  0\n","2         3               0      7    1.0                  1\n","3         2               1      1    1.0                  0\n","4         1               1      3    1.0                  1"],"text/html":["\n","  <div id=\"df-b071d4e8-ff6d-4006-92aa-58bd049bd4de\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>category</th>\n","      <th>main_promotion</th>\n","      <th>color</th>\n","      <th>stars</th>\n","      <th>success_indicator</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b071d4e8-ff6d-4006-92aa-58bd049bd4de')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b071d4e8-ff6d-4006-92aa-58bd049bd4de button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b071d4e8-ff6d-4006-92aa-58bd049bd4de');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e10875d2-3347-4785-8d12-4d2898bf13cf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e10875d2-3347-4785-8d12-4d2898bf13cf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e10875d2-3347-4785-8d12-4d2898bf13cf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["!pip install keras==2.12.0\n","import pandas as pd\n","import numpy as np\n","from sklearn.pipeline import Pipeline\n","from sklearn.preprocessing import StandardScaler, LabelEncoder\n","from sklearn.model_selection import train_test_split\n","import tensorflow as tf\n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.wrappers.scikit_learn import KerasClassifier\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import accuracy_score, precision_score, f1_score, recall_score\n","import warnings\n","warnings.filterwarnings('ignore')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tHc2qZJRBo-4","executionInfo":{"status":"ok","timestamp":1707822264108,"user_tz":-330,"elapsed":11147,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}},"outputId":"2cc8aa08-322d-4938-e300-580ddff95b60"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: keras==2.12.0 in /usr/local/lib/python3.10/dist-packages (2.12.0)\n"]}]},{"cell_type":"code","source":["class ANNClassifier:\n","    def __init__(self):                   #initializing variables\n","        self.pipeline = None\n","        self.label_encoder1 = None\n","        self.label_encoder2 = None\n","        self.label_encoder3 = None\n","        self.scaler = None\n","        self.x_train = None\n","        self.x_test = None\n","        self.y_encoded_train = None\n","        self.y_encoded_test = None\n","\n","    def load(self, file_path):                    # Loading data stage\n","        self.data = pd.read_csv(\"/content/drive/MyDrive/DSW_Internship_Task/historic.csv\")\n","\n","    def preprocess(self):  # preprocessing stage\n","\n","        x = self.data.drop(['success_indicator', 'item_no'], axis=1)  # separating dependent and independent variables\n","        y = self.data['success_indicator']\n","\n","        # here we will encode all text categorical data to numerical categorical data\n","        self.label_encoder1 = LabelEncoder()\n","        x['category_encoded'] = self.label_encoder1.fit_transform(x['category'])\n","        x.drop('category', axis=1, inplace=True)\n","\n","        self.label_encoder2 = LabelEncoder()\n","        x['main_promotion_encoded'] = self.label_encoder2.fit_transform(x['main_promotion'])\n","        x.drop('main_promotion', axis=1, inplace=True)\n","\n","        self.label_encoder3 = LabelEncoder()\n","        x['color_encoded'] = self.label_encoder3.fit_transform(x['color'])\n","        x.drop('color', axis=1, inplace=True)\n","\n","        # here we will convert stars rating features into bins where rating <=3 will be 0 and rating>3 will be 1\n","        x['stars'] = np.where(x['stars'] <= 3, 0, x['stars'])\n","        x['stars'] = np.where(x['stars'] > 3, 1, x['stars'])\n","\n","        # encoding category where 'flop'= 0 and 'top'=1\n","        label_encoder4 = LabelEncoder()\n","        y_encoded = label_encoder4.fit_transform(y)\n","        y_encoded = np.where(y_encoded == label_encoder4.classes_.tolist().index('flop'), 0, y_encoded)\n","        y_encoded = np.where(y_encoded == label_encoder4.classes_.tolist().index('top'), 1, y_encoded)\n","\n","        self.scaler = StandardScaler()\n","        x_train = self.scaler.fit_transform(x)\n","\n","        # here we will split the data into training and testing purpose\n","        self.x_train, self.x_test, self.y_encoded_train, self.y_encoded_test = train_test_split(x_train, y_encoded,\n","                                                                                                test_size=0.2,\n","                                                                                                random_state=77)\n","\n","    def create_model(self):\n","        model = Sequential()\n","        model.add(Dense(10, input_dim=4, activation='relu'))\n","        model.add(Dense(1, activation='sigmoid'))\n","        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","        return model\n","\n","    def fit(self):\n","        # Creating KerasClassifier by using above model\n","        keras_model = KerasClassifier(build_fn=self.create_model, epochs=10, batch_size=32, verbose=0)\n","\n","        # Creating sklearn pipeline\n","        self.pipeline = Pipeline([\n","            ('scaler', StandardScaler()),  # Preprocessing step, if needed\n","            ('classifier', keras_model)  # Keras model as the classifier\n","        ])\n","\n","        # here we will fit the pipeline on the training data\n","        self.pipeline.fit(self.x_train, self.y_encoded_train)\n","\n","    def predict(self):\n","        # we will use pipeline to make predictions\n","        return self.pipeline.predict(self.x_test)\n","\n","    def evaluate(self):\n","\n","        y_pred = self.predict()\n","        accuracy = accuracy_score(self.y_encoded_test, y_pred)\n","\n","        precision = precision_score(self.y_encoded_test,y_pred)\n","        recall = recall_score(self.y_encoded_test, y_pred)\n","        f1 = f1_score(self.y_encoded_test, y_pred)\n","\n","        print(\"Accuracy with ann_classifier is:\", accuracy)\n","        print(\"precision with  ann_classifier model is :\", precision)  # Model evaluation stage\n","        print(\"recall with ann_classifier model is:\", recall)\n","        print(\"f1 Score with ann_classifier model is :\", f1)\n","\n","   # function to load unlabelled file i.e, 'prediction_input.csv'\n","    def load_test_file(self, file_path):                                      #loading stage for testing file\n","        self.input_data = pd.read_csv(file_path)\n","        return self.input_data\n","\n","        # this function will process input data such as removing the unwanted features and encoding categorical features\n","    def test_data_preprocessor(self):\n","\n","        self.input_data_processed = self.input_data.drop(['item_no'], axis=1)           #preprocessing stage for\n","\n","        self.input_data_processed['category_encoded'] = pipeline.label_encoder1.transform(self.input_data_processed['category'])\n","        self.input_data_processed.drop('category', axis=1, inplace=True)\n","\n","        self.input_data_processed['main_promotion_encoded'] = pipeline.label_encoder2.transform(self.input_data_processed['main_promotion'])\n","        self.input_data_processed.drop('main_promotion', axis=1, inplace=True)\n","\n","        self.input_data_processed['color_encoded'] = pipeline.label_encoder3.transform(self.input_data_processed['color'])\n","        self.input_data_processed.drop('color', axis=1, inplace=True)\n","\n","        # here we will convert star rating into bins and designate star <= 3 into 0 and star rating> 3 =1\n","        self.input_data_processed['stars'] = np.where(self.input_data_processed['stars'] <= 3, 0, self.input_data_processed['stars'])\n","        self.input_data_processed['stars'] = np.where(self.input_data_processed['stars'] > 3, 1, self.input_data_processed['stars'])\n","\n","        self.input_data_processed = pipeline.scaler.transform(self.input_data_processed)\n","\n","        return self.input_data_processed\n","\n","\n","        # this function will predict dependent variable based on independent variable present in prediction_input file\n","            # and give a an array of 2000 row in form of 1 , 0 where 1 = 'TOP' AND 0 = 'FLOP'\n","    def predict_for_test_data(self):\n","        output = self.pipeline.predict(self.input_data_processed)\n","        return output\n","\n"],"metadata":{"id":"zKrRXCjMBzfZ","executionInfo":{"status":"ok","timestamp":1707822323803,"user_tz":-330,"elapsed":406,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["pipeline = ANNClassifier()\n","pipeline.load('/content/drive/MyDrive/DSW_Internship_Task/historic.csv')\n","pipeline.preprocess()\n","pipeline.create_model()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2dQ5xTcwB6Zq","executionInfo":{"status":"ok","timestamp":1707822329342,"user_tz":-330,"elapsed":659,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}},"outputId":"3522f8d4-fa79-45fd-c15e-953d14059e57"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<keras.engine.sequential.Sequential at 0x7e9a04a683a0>"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["pipeline.fit()\n","pipeline.predict()\n","pipeline.evaluate()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ldD1aBzxCG-6","executionInfo":{"status":"ok","timestamp":1707822337555,"user_tz":-330,"elapsed":6249,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}},"outputId":"56531434-ff4a-44da-9523-e30d3f64111f"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["50/50 [==============================] - 0s 1ms/step\n","50/50 [==============================] - 0s 1ms/step\n","Accuracy with ann_classifier is: 0.801875\n","precision with  ann_classifier model is : 0.8218442256042973\n","recall with ann_classifier model is: 0.8861003861003861\n","f1 Score with ann_classifier model is : 0.85276358569438\n"]}]},{"cell_type":"code","source":["pipeline.load_test_file('/content/drive/MyDrive/DSW_Internship_Task/prediction_input.csv')\n","pipeline.test_data_preprocessor()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WL4rP8kMJSka","executionInfo":{"status":"ok","timestamp":1707822386761,"user_tz":-330,"elapsed":611,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}},"outputId":"5db3359e-4281-414d-d37c-42b41a23fe5c"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0.71814041,  0.14679292, -1.21487945, -1.09392977],\n","       [-1.39248534, -0.43949933,  1.41449261,  1.64581764],\n","       [-1.39248534,  1.31937742, -1.21487945, -0.40899292],\n","       ...,\n","       [-1.39248534, -0.43949933, -1.21487945,  0.27594393],\n","       [-1.39248534, -1.61208383,  1.41449261, -0.06652449],\n","       [-1.39248534,  0.73308517, -0.33842209, -0.06652449]])"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":[],"metadata":{"id":"IRDG9tK4CB1i"},"execution_count":null,"outputs":[]}]}