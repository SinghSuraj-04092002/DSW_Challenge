{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOMQLphyKMuv8CUyGJSaAPv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z_gdPrv35zcq","executionInfo":{"status":"ok","timestamp":1707818413349,"user_tz":-330,"elapsed":34085,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}},"outputId":"6c722130-14b9-44cf-c3f6-7422defe06fa"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score,f1_score,precision_score,recall_score\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","import warnings\n","warnings.filterwarnings('ignore')"],"metadata":{"id":"ilBi9rEb6iRz","executionInfo":{"status":"ok","timestamp":1707819646787,"user_tz":-330,"elapsed":417,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv('/content/drive/MyDrive/DSW_Internship_Task/historic.csv')"],"metadata":{"id":"kDlIeZud--Kc","executionInfo":{"status":"ok","timestamp":1707819681876,"user_tz":-330,"elapsed":713,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ckdBSesA_GWE","executionInfo":{"status":"ok","timestamp":1707819697375,"user_tz":-330,"elapsed":9,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}},"outputId":"e7f692df-614d-4d80-fc85-65812b3ebd56"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   item_no    category      main_promotion  color  stars success_indicator\n","0   739157       Tunic             Catalog  Green    3.1              flop\n","1   591846      Hoodie  Category_Highlight    Red    1.5              flop\n","2   337574  Sweatshirt             Catalog    Red    4.4               top\n","3   401933  Polo-Shirt  Category_Highlight   Blue    3.1              flop\n","4   812151      Hoodie  Category_Highlight  Green    4.1               top"],"text/html":["\n","  <div id=\"df-6786e99e-8aa3-4326-8441-4b3b541fe966\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>item_no</th>\n","      <th>category</th>\n","      <th>main_promotion</th>\n","      <th>color</th>\n","      <th>stars</th>\n","      <th>success_indicator</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>739157</td>\n","      <td>Tunic</td>\n","      <td>Catalog</td>\n","      <td>Green</td>\n","      <td>3.1</td>\n","      <td>flop</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>591846</td>\n","      <td>Hoodie</td>\n","      <td>Category_Highlight</td>\n","      <td>Red</td>\n","      <td>1.5</td>\n","      <td>flop</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>337574</td>\n","      <td>Sweatshirt</td>\n","      <td>Catalog</td>\n","      <td>Red</td>\n","      <td>4.4</td>\n","      <td>top</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>401933</td>\n","      <td>Polo-Shirt</td>\n","      <td>Category_Highlight</td>\n","      <td>Blue</td>\n","      <td>3.1</td>\n","      <td>flop</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>812151</td>\n","      <td>Hoodie</td>\n","      <td>Category_Highlight</td>\n","      <td>Green</td>\n","      <td>4.1</td>\n","      <td>top</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6786e99e-8aa3-4326-8441-4b3b541fe966')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6786e99e-8aa3-4326-8441-4b3b541fe966 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6786e99e-8aa3-4326-8441-4b3b541fe966');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f1589710-0d19-45a4-a757-7efeb9982ea3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f1589710-0d19-45a4-a757-7efeb9982ea3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f1589710-0d19-45a4-a757-7efeb9982ea3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["class Logistic_regression_pipeline:\n","    def __init__(self):\n","        self.model = None\n","        self.scaler = None\n","        self.label_encoder1 = None\n","        self.label_encoder2 = None\n","        self.label_encoder3 = None\n","\n","    def load(self, file_path):                             # Loading data stage\n","        self.data = pd.read_csv(file_path)\n","\n","    def preprocess(self):                                  # preprocessing stage\n","\n","        x = self.data.drop(['success_indicator', 'item_no'], axis=1)  # seperating dependent and independent varaiables\n","        y = self.data['success_indicator']\n","\n","        # here we will encode all text categorical data to numerical categorical data\n","        self.label_encoder1 = LabelEncoder()\n","        x['category_encoded'] = self.label_encoder1.fit_transform(x['category'])\n","        x.drop('category', axis=1, inplace=True)\n","\n","        self.label_encoder2 = LabelEncoder()\n","        x['main_promotion_encoded'] = self.label_encoder2.fit_transform(x['main_promotion'])\n","        x.drop('main_promotion', axis=1, inplace=True)\n","\n","        self.label_encoder3 = LabelEncoder()\n","        x['color_encoded'] = self.label_encoder3.fit_transform(x['color'])\n","        x.drop('color', axis=1, inplace=True)\n","\n","        #here we will convert stars rating features into bins where rating <=3 will be 0 and rating>3 will be 1\n","        x['stars'] = np.where(x['stars'] <= 3, 0, x['stars'])\n","        x['stars'] = np.where(x['stars'] > 3, 1, x['stars'])\n","\n","\n","        # encoding category where 'flop'= 0 and 'top'=1\n","        label_encoder4 = LabelEncoder()\n","        y_encoded = label_encoder4.fit_transform(y)\n","        y_encoded = np.where(y_encoded == label_encoder4.classes_.tolist().index('flop'), 0, y_encoded)\n","        y_encoded = np.where(y_encoded == label_encoder4.classes_.tolist().index('top'), 1, y_encoded)\n","\n","        self.scaler = StandardScaler()\n","        x_train = self.scaler.fit_transform(x)\n","\n","        #here we will split the data into training and testing purpose\n","        self.x_train, self.x_test, self.y_encoded_train, self.y_encoded_test = train_test_split(x, y_encoded, test_size=0.2, random_state=42)\n","\n","\n","        #function for training the model with historic data\n","    def train(self):\n","        self.lr_clf = LogisticRegression()\n","        self.lr_clf.fit(self.x_train, self.y_encoded_train)                # training data stage\n","\n","        #function for testing the model with historic data\n","    def test(self):                                                        # testing data stage\n","        y_pred = self.lr_clf.predict(self.x_test)\n","\n","\n","       # evaluating the model performance with accuaccuracy_score , precision, recall and f1_score\n","        accuracy = accuracy_score(self.y_encoded_test, y_pred)\n","        precision = precision_score(self.y_encoded_test,y_pred)\n","        recall = recall_score(self.y_encoded_test, y_pred)\n","        f1 = f1_score(self.y_encoded_test, y_pred)\n","\n","        print(\"Accuracy with logistic_regression is:\", accuracy)\n","        print(\"precision with logistic_regression model is :\", precision)  # Model evaluation stage\n","        print(\"recall with logistic_regression model is:\", recall)\n","        print(\"f1 Score with logistic_regression model is :\", f1)\n","\n","        # function to load unlabelled file i.e, 'prediction_input.csv'\n","    def load_test_file(self, file_path):                                      #loading stage for testing file\n","        self.input_data = pd.read_csv(file_path)\n","        return self.input_data\n","\n","        # this function will process input data such as removing the unwanted features and encoding categorical features\n","    def test_data_preprocessor(self):\n","\n","        self.input_data_processed = self.input_data.drop(['item_no'], axis=1)           #preprocessing stage for\n","\n","        self.input_data_processed['category_encoded'] = pipeline.label_encoder1.transform(self.input_data_processed['category'])\n","        self.input_data_processed.drop('category', axis=1, inplace=True)\n","\n","        self.input_data_processed['main_promotion_encoded'] = pipeline.label_encoder2.transform(self.input_data_processed['main_promotion'])\n","        self.input_data_processed.drop('main_promotion', axis=1, inplace=True)\n","\n","        self.input_data_processed['color_encoded'] = pipeline.label_encoder3.transform(self.input_data_processed['color'])\n","        self.input_data_processed.drop('color', axis=1, inplace=True)\n","\n","        # here we will convert star rating into bins and designate star <= 3 into 0 and star rating> 3 =1\n","        self.input_data_processed['stars'] = np.where(self.input_data_processed['stars'] <= 3, 0, self.input_data_processed['stars'])\n","        self.input_data_processed['stars'] = np.where(self.input_data_processed['stars'] > 3, 1, self.input_data_processed['stars'])\n","\n","        self.input_data_processed = pipeline.scaler.transform(self.input_data_processed)\n","\n","        return self.input_data_processed\n","\n","\n","        # this function will predict dependent variable based on independent variable present in prediction_input file\n","            # and give a an array of 2000 row in form of 1 , 0 where 1 = 'TOP' AND 0 = 'FLOP'\n","    def predict_for_test_data(self):\n","        output = pipeline.lr_clf.predict(self.input_data_processed)\n","        return output"],"metadata":{"id":"cfP-MpCf6rRh","executionInfo":{"status":"ok","timestamp":1707819744721,"user_tz":-330,"elapsed":491,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["pipeline = Logistic_regression_pipeline()\n","pipeline.load(\"/content/drive/MyDrive/DSW_Internship_Task/historic.csv\")\n","pipeline.preprocess()\n","pipeline.train()\n","pipeline.test()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JmDhHMec_VEv","executionInfo":{"status":"ok","timestamp":1707819793339,"user_tz":-330,"elapsed":6,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}},"outputId":"8a71ed80-2cd3-4185-96ce-5a174a03dd63"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy with logistic_regression is: 0.784375\n","precision with logistic_regression model is : 0.8220338983050848\n","recall with logistic_regression model is: 0.8483965014577259\n","f1 Score with logistic_regression model is : 0.8350071736011477\n"]}]},{"cell_type":"code","source":["pipeline.load_test_file(\"/content/drive/MyDrive/DSW_Internship_Task/prediction_input.csv\")\n","pipeline.test_data_preprocessor()\n","print('prediction on 2000 rows in prediction_input data : ',pipeline.predict_for_test_data().shape)\n","print('required array of prediction of classes 2 classes on 2000 rows : ',pipeline.predict_for_test_data())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I9JgXh4P_hva","executionInfo":{"status":"ok","timestamp":1707819835460,"user_tz":-330,"elapsed":593,"user":{"displayName":"Suraj Singh","userId":"15965593826219083362"}},"outputId":"c7de5feb-0c3f-4166-8b2d-73d07dc58ce3"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["prediction on 2000 rows in prediction_input data :  (2000,)\n","required array of prediction of classes 2 classes on 2000 rows :  [1 0 0 ... 0 0 0]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"kLo21bFo-YJB"},"execution_count":null,"outputs":[]}]}